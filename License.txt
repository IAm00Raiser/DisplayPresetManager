import ctypes
from ctypes import windll, byref, c_uint32, c_int32, Structure, POINTER, c_void_p
import win32api
import win32con
import win32gui
import win32print

# Windows API constants
DM_PELSWIDTH = 0x00080000
DM_PELSHEIGHT = 0x00100000
DM_DISPLAYFREQUENCY = 0x00400000
DM_DISPLAYORIENTATION = 0x00000080

# DPI awareness constants
PROCESS_PER_MONITOR_DPI_AWARE = 2
MDT_EFFECTIVE_DPI = 0

class DEVMODE(Structure):
    _fields_ = [
        ("dmDeviceName", ctypes.c_char * 32),
        ("dmSpecVersion", ctypes.c_ushort),
        ("dmDriverVersion", ctypes.c_ushort),
        ("dmSize", ctypes.c_ushort),
        ("dmDriverExtra", ctypes.c_ushort),
        ("dmFields", ctypes.c_ulong),
        ("dmOrientation", ctypes.c_short),
        ("dmPaperSize", ctypes.c_short),
        ("dmPaperLength", ctypes.c_short),
        ("dmPaperWidth", ctypes.c_short),
        ("dmScale", ctypes.c_short),
        ("dmCopies", ctypes.c_short),
        ("dmDefaultSource", ctypes.c_short),
        ("dmPrintQuality", ctypes.c_short),
        ("dmColor", ctypes.c_short),
        ("dmDuplex", ctypes.c_short),
        ("dmYResolution", ctypes.c_short),
        ("dmTTOption", ctypes.c_short),
        ("dmCollate", ctypes.c_short),
        ("dmFormName", ctypes.c_char * 32),
        ("dmUnusedPadding", ctypes.c_ushort),
        ("dmBitsPerPel", ctypes.c_ulong),
        ("dmPelsWidth", ctypes.c_ulong),
        ("dmPelsHeight", ctypes.c_ulong),
        ("dmDisplayFlags", ctypes.c_ulong),
        ("dmDisplayFrequency", ctypes.c_ulong),
        ("dmICMMethod", ctypes.c_ulong),
        ("dmICMIntent", ctypes.c_ulong),
        ("dmMediaType", ctypes.c_ulong),
        ("dmDitherType", ctypes.c_ulong),
        ("dmReserved1", ctypes.c_ulong),
        ("dmReserved2", ctypes.c_ulong),
        ("dmPanningWidth", ctypes.c_ulong),
        ("dmPanningHeight", ctypes.c_ulong),
    ]

class DISPLAY_DEVICE(Structure):
    _fields_ = [
        ("cb", ctypes.c_ulong),
        ("DeviceName", ctypes.c_char * 32),
        ("DeviceString", ctypes.c_char * 128),
        ("StateFlags", ctypes.c_ulong),
        ("DeviceID", ctypes.c_char * 128),
        ("DeviceKey", ctypes.c_char * 128),
    ]

class DisplayConfig:
    def __init__(self, device_name, resolution, refresh_rate, orientation, scale):
        self.device_name = device_name
        self.resolution = resolution  # (width, height)
        self.refresh_rate = refresh_rate
        self.orientation = orientation  # 0, 90, 180, 270
        self.scale = scale  # DPI scaling percentage

class DisplayPreset:
    def __init__(self, name, displays):
        self.name = name
        self.displays = displays  # List of display configurations

class EnhancedDisplayManager:
    def __init__(self):
        self.user32 = windll.user32
        self.gdi32 = windll.gdi32
        self.shcore = windll.shcore
        
        # Set DPI awareness
        try:
            self.shcore.SetProcessDpiAwareness(PROCESS_PER_MONITOR_DPI_AWARE)
        except:
            try:
                self.user32.SetProcessDPIAware()
            except:
                pass
    
    def get_display_devices(self):
        """Get all connected display devices"""
        displays = []
        i = 0
        while True:
            device = DISPLAY_DEVICE()
            device.cb = ctypes.sizeof(device)
            
            if not self.user32.EnumDisplayDevicesA(None, i, byref(device), 0):
                break
                
            if device.StateFlags & 0x1:  # DISPLAY_DEVICE_ATTACHED
                displays.append(device.DeviceName.decode('utf-8'))
            i += 1
        return displays
    
    def get_display_settings(self, device_name):
        """Get current display settings for a device"""
        devmode = DEVMODE()
        devmode.dmSize = ctypes.sizeof(devmode)
        
        if self.user32.EnumDisplaySettingsA(device_name.encode('utf-8'), 
                                          win32con.ENUM_CURRENT_SETTINGS, 
                                          byref(devmode)):
            scale = 100
            
            # Try to get DPI scaling
            try:
                monitor_handle = self.get_monitor_handle(device_name)
                if monitor_handle:
                    dpi_x = ctypes.c_uint32()
                    dpi_y = ctypes.c_uint32()
                    if self.shcore.GetDpiForMonitor(monitor_handle, MDT_EFFECTIVE_DPI, 
                                                   byref(dpi_x), byref(dpi_y)) == 0:
                        scale = int((dpi_x.value / 96.0) * 100)
            except:
                pass
            
            # Handle orientation safely
            orientation = 0
            try:
                orientation = devmode.dmDisplayOrientation
            except:
                pass
            
            return DisplayConfig(
                device_name=device_name,
                resolution=(devmode.dmPelsWidth, devmode.dmPelsHeight),
                refresh_rate=devmode.dmDisplayFrequency,
                orientation=orientation,
                scale=scale
            )
        return None
    
    def get_monitor_handle(self, device_name):
        """Get monitor handle for a display device"""
        def enum_monitor_proc(hMonitor, hdcMonitor, lprcMonitor, dwData):
            try:
                # Get device name for this monitor
                device_info = DISPLAY_DEVICE()
                device_info.cb = ctypes.sizeof(device_info)
                
                if self.user32.EnumDisplayDevicesA(device_name.encode('utf-8'), 0, 
                                                  byref(device_info), 0):
                    if device_info.DeviceName.decode('utf-8') == device_name:
                        dwData[0] = hMonitor
                        return False  # Stop enumeration
                return True  # Continue enumeration
            except:
                return True  # Continue enumeration on error
        
        dwData = [None]
        try:
            MonitorEnumProc = ctypes.WINFUNCTYPE(ctypes.c_bool, ctypes.c_void_p, 
                                                ctypes.c_void_p, ctypes.POINTER(ctypes.c_int32 * 4), 
                                                ctypes.c_void_p)
            self.user32.EnumDisplayMonitors(None, None, MonitorEnumProc(enum_monitor_proc), dwData)
        except:
            pass
        return dwData[0]
    
    def apply_display_settings(self, config):
        """Apply display settings to a device"""
        devmode = DEVMODE()
        devmode.dmSize = ctypes.sizeof(devmode)
        
        # Get current settings first
        if not self.user32.EnumDisplaySettingsA(config.device_name.encode('utf-8'),
                                              win32con.ENUM_CURRENT_SETTINGS,
                                              byref(devmode)):
            return False
        
        # Update settings
        devmode.dmPelsWidth = config.resolution[0]
        devmode.dmPelsHeight = config.resolution[1]
        devmode.dmDisplayFrequency = config.refresh_rate
        
        # Handle orientation safely
        try:
            devmode.dmDisplayOrientation = config.orientation
            devmode.dmFields = (DM_PELSWIDTH | DM_PELSHEIGHT | 
                               DM_DISPLAYFREQUENCY | DM_DISPLAYORIENTATION)
        except:
            devmode.dmFields = (DM_PELSWIDTH | DM_PELSHEIGHT | 
                               DM_DISPLAYFREQUENCY)
        
        # Apply settings
        result = self.user32.ChangeDisplaySettingsExA(
            config.device_name.encode('utf-8'),
            byref(devmode),
            None,
            win32con.CDS_UPDATEREGISTRY | win32con.CDS_NORESET,
            None
        )
        
        if result == win32con.DISP_CHANGE_SUCCESSFUL:
            # Apply DPI scaling if different
            if config.scale != 100:
                self.set_dpi_scaling(config.device_name, config.scale)
            
            self.user32.ChangeDisplaySettingsExA(None, None, None, 0, None)
            return True
        return False
    
    def set_dpi_scaling(self, device_name, scale_percentage):
        """Set DPI scaling for a display"""
        try:
            monitor_handle = self.get_monitor_handle(device_name)
            if monitor_handle:
                dpi_value = int((scale_percentage / 100.0) * 96)
                self.shcore.SetDpiForMonitor(monitor_handle, MDT_EFFECTIVE_DPI, 
                                           ctypes.c_uint32(dpi_value), 
                                           ctypes.c_uint32(dpi_value))
        except:
            pass
    
    def open_display_settings(self):
        """Open Windows display settings dialog"""
        try:
            import subprocess
            subprocess.Popen(["rundll32.exe", "shell32.dll,Control_RunDLL", "desk.cpl,,3"])
            return True
        except:
            return False
    
    def get_available_resolutions(self, device_name):
        """Get available resolutions for a display"""
        resolutions = []
        i = 0
        while True:
            devmode = DEVMODE()
            devmode.dmSize = ctypes.sizeof(devmode)
            
            if not self.user32.EnumDisplaySettingsA(device_name.encode('utf-8'), i, byref(devmode)):
                break
            
            resolution = (devmode.dmPelsWidth, devmode.dmPelsHeight)
            if resolution not in resolutions:
                resolutions.append(resolution)
            i += 1
        
        return resolutions
    
    def get_available_refresh_rates(self, device_name, resolution):
        """Get available refresh rates for a specific resolution"""
        refresh_rates = []
        i = 0
        while True:
            devmode = DEVMODE()
            devmode.dmSize = ctypes.sizeof(devmode)
            
            if not self.user32.EnumDisplaySettingsA(device_name.encode('utf-8'), i, byref(devmode)):
                break
            
            if (devmode.dmPelsWidth, devmode.dmPelsHeight) == resolution:
                if devmode.dmDisplayFrequency not in refresh_rates:
                    refresh_rates.append(devmode.dmDisplayFrequency)
            i += 1
        
        return refresh_rates
```

## 2. Update Display Presets JSON

```json
{
  "Onsite": {
    "displays": [
      {
        "device_name": "\\\\.\\DISPLAY1",
        "resolution": [3840, 2160],
        "refresh_rate": 60,
        "orientation": 0,
        "scale": 100
      },
      {
        "device_name": "\\\\.\\DISPLAY2",
        "resolution": [2560, 1440],
        "refresh_rate": 164,
        "orientation": 0,
        "scale": 100
      }
    ]
  },
  "Remote": {
    "displays": [
      {
        "device_name": "\\\\.\\DISPLAY1",
        "resolution": [2560, 1600],
        "refresh_rate": 60,
        "orientation": 0,
        "scale": 100
      },
      {
        "device_name": "\\\\.\\DISPLAY2",
        "resolution": [1920, 1200],
        "refresh_rate": 164,
        "orientation": 0,
        "scale": 100
      }
    ]
  }
}
```

## 3. Create Distribution Files

Let me create the distribution files for you:

**setup.py:**
```python
from setuptools import setup, find_packages
import os

def read_readme():
    with open("README.md", "r", encoding="utf-8") as fh:
        return fh.read()

def read_requirements():
    with open("requirements.txt", "r", encoding="utf-8") as fh:
        return [line.strip() for line in fh if line.strip() and not line.startswith("#")]

setup(
    name="display-preset-manager",
    version="1.0.0",
    author="Steven",
    description="A Windows system tray application for managing display configuration presets",
    long_description=read_readme(),
    long_description_content_type="text/markdown",
    url="https://github.com/yourusername/DisplayManager",
    packages=find_packages(),
    classifiers=[
        "Development Status :: 4 - Beta",
        "Intended Audience :: End Users/Desktop",
        "License :: OSI Approved :: MIT License",
        "Operating System :: Microsoft :: Windows",
        "Programming Language :: Python :: 3",
        "Programming Language :: Python :: 3.8",
        "Programming Language :: Python :: 3.9",
        "Programming Language :: Python :: 3.10",
        "Programming Language :: Python :: 3.11",
        "Topic :: Desktop Environment",
        "Topic :: System :: Hardware",
    ],
    python_requires=">=3.8",
    install_requires=read_requirements(),
    entry_points={
        "console_scripts": [
            "display-preset-manager=display_presets:main",
        ],
    },
    include_package_data=True,
    package_data={
        "": ["*.json", "*.bat", "*.md"],
    },
    keywords="display monitor preset configuration windows system-tray",
    project_urls={
        "Bug Reports": "https://github.com/yourusername/DisplayManager/issues",
        "Source": "https://github.com/yourusername/DisplayManager",
        "Documentation": "https://github.com/yourusername/DisplayManager#readme",
    },
)
```

**build_exe.py:**
```python
import PyInstaller.__main__
import os

# Build the executable
PyInstaller.__main__.run([
    'display_presets.py',
    '--onefile',
    '--windowed',
    '--name=DisplayPresetManager',
    '--add-data=display_presets.json;.',
    '--hidden-import=PyQt5.QtCore',
    '--hidden-import=PyQt5.QtGui',
    '--hidden-import=PyQt5.QtWidgets',
    '--hidden-import=win32api',
    '--hidden-import=win32con',
    '--hidden-import=win32gui',
    '--hidden-import=win32print',
    '--hidden-import=ctypes',
    '--hidden-import=psutil',
])
```

**installer.nsi:**
```nsi
!define APPNAME "Display Preset Manager"
!define COMPANYNAME "Your Company"
!define DESCRIPTION "A Windows system tray application for managing display configuration presets"
!define VERSIONMAJOR 1
!define VERSIONMINOR 0
!define VERSIONBUILD 0
!define HELPURL "https://github.com/yourusername/DisplayManager"
!define UPDATEURL "https://github.com/yourusername/DisplayManager/releases"
!define ABOUTURL "https://github.com/yourusername/DisplayManager"
!define INSTALLSIZE 50000

RequestExecutionLevel admin
LicenseData "LICENSE.txt"
Name "${APPNAME}"
Icon "icon.ico"
outFile "DisplayPresetManager-Setup.exe"

!include LogicLib.nsh

page license
page directory
page instfiles

!macro VerifyUserIsAdmin
UserInfo::GetAccountType
pop $0
${If} $0 != "admin"
        messageBox mb_iconstop "Administrator rights required!"
        setErrorLevel 740 ;ERROR_ELEVATION_REQUIRED
        quit
${EndIf}
!macroend

function .onInit
        setShellVarContext all
        !insertmacro VerifyUserIsAdmin
functionEnd

section "install"
        setOutPath $INSTDIR
        file "dist\DisplayPresetManager.exe"
        file "display_presets.json"
        file "README.md"
        file "LICENSE.txt"
        
        writeUninstaller "$INSTDIR\uninstall.exe"
        
        createDirectory "$SMPROGRAMS\${APPNAME}"
        createShortCut "$SMPROGRAMS\${APPNAME}\${APPNAME}.lnk" "$INSTDIR\DisplayPresetManager.exe"
        createShortCut "$SMPROGRAMS\${APPNAME}\Uninstall.lnk" "$INSTDIR\uninstall.exe"
        
        writeRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "DisplayName" "${APPNAME}"
        writeRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "UninstallString" "$\"$INSTDIR\uninstall.exe$\""
        writeRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "QuietUninstallString" "$\"$INSTDIR\uninstall.exe$\" /S"
        writeRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "InstallLocation" "$\"$INSTDIR$\""
        writeRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "DisplayIcon" "$\"$INSTDIR\DisplayPresetManager.exe$\""
        writeRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "Publisher" "$\"${COMPANYNAME}$\""
        writeRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "HelpLink" "$\"${HELPURL}$\""
        writeRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "URLUpdateInfo" "$\"${UPDATEURL}$\""
        writeRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "URLInfoAbout" "$\"${ABOUTURL}$\""
        writeRegStr HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "DisplayVersion" "$\"${VERSIONMAJOR}.${VERSIONMINOR}.${VERSIONBUILD}$\""
        writeRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "VersionMajor" ${VERSIONMAJOR}
        writeRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "VersionMinor" ${VERSIONMINOR}
        writeRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "NoModify" 1
        writeRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "NoRepair" 1
        writeRegDWORD HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}" "EstimatedSize" ${INSTALLSIZE}
sectionEnd

section "uninstall"
        delete "$INSTDIR\DisplayPresetManager.exe"
        delete "$INSTDIR\display_presets.json"
        delete "$INSTDIR\README.md"
        delete "$INSTDIR\LICENSE.txt"
        delete "$INSTDIR\uninstall.exe"
        
        rmDir "$INSTDIR"
        
        delete "$SMPROGRAMS\${APPNAME}\${APPNAME}.lnk"
        delete "$SMPROGRAMS\${APPNAME}\Uninstall.lnk"
        rmDir "$SMPROGRAMS\${APPNAME}"
        
        deleteRegKey HKLM "Software\Microsoft\Windows\CurrentVersion\Uninstall\${APPNAME}"
sectionEnd
```

**LICENSE.txt:**
```
<code_block_to_apply_changes_from>
```

**build.bat:**
```batch
@echo off
echo Building Display Preset Manager...
echo.

REM Install PyInstaller if not already installed
pip install pyinstaller

REM Build the executable
python build_exe.py

echo.
echo Build complete! Check the dist/ folder for the executable.
pause
```

**package.bat:**
```batch
@echo off
echo Packaging Display Preset Manager...
echo.

REM Create distribution directory
if not exist "dist" mkdir dist

REM Copy files to dist
copy "display_presets.py" "dist\"
copy "display_manager.py" "dist\"
copy "display_presets.json" "dist\"
copy "requirements.txt" "dist\"
copy "README.md" "dist\"
copy "LICENSE.txt" "dist\"
copy "launch.bat" "dist\"
copy "run_as_admin.bat" "dist\"

REM Create zip file
powershell Compress-Archive -Path "dist\*" -DestinationPath "DisplayPresetManager-v1.0.0.zip" -Force

echo.
echo Package created: DisplayPresetManager-v1.0.0.zip
pause
```

## 4. Updated README.md

```markdown
# Display Preset Manager

A Windows system tray application that allows you to save and apply display configuration presets. The app manages resolution, refresh rate, orientation, and DPI scaling for all connected monitors.

## Features

- **Save Display Presets**: Capture current display settings for all connected monitors
- **Apply Presets**: Quickly switch between saved display configurations
- **System Tray Integration**: Runs in the background with easy access via system tray
- **Multi-Monitor Support**: Handles multiple displays with individual settings
- **Persistent Storage**: Presets are saved to JSON file and persist between sessions
- **Delete Presets**: Remove unwanted presets from the system

## Requirements

- Windows 11 (or Windows 10)
- Python 3.8 or higher
- Administrator privileges (required for display settings changes)

## Installation

### Option 1: PyPI Package
```bash
pip install display-preset-manager
display-preset-manager
```

### Option 2: From Source
1. **Clone or download the project files**
2. **Install Python dependencies**:
   ```bash
   pip install -r requirements.txt
   ```
3. **Run the application**:
   ```bash
   python display_presets.py
   ```

### Option 3: Standalone Executable
1. Download the latest release from GitHub
2. Run `DisplayPresetManager.exe` as administrator

## Usage

### Starting the App

1. Run the application as administrator (required for display settings changes)
2. The app will appear in the system tray with a display icon
3. Right-click the tray icon to access the menu

### Saving a Preset

1. Configure your displays to the desired settings (resolution, refresh rate, etc.)
2. Right-click the system tray icon
3. Select "Save Current Display Preset"
4. Enter a name for your preset
5. Click "Save Preset"

### Applying a Preset

1. Right-click the system tray icon
2. Select the preset name from the menu
3. The display settings will be applied immediately

### Deleting a Preset

1. Right-click the system tray icon
2. Select "Delete Preset"
3. Choose the preset to delete from the list
4. Click "Delete"

### Exiting the App

1. Right-click the system tray icon
2. Select "Exit"

## Display Settings Managed

- **Resolution**: Width and height in pixels
- **Refresh Rate**: Monitor refresh rate in Hz
- **Orientation**: Display rotation (0°, 90°, 180°, 270°)
- **DPI Scaling**: Display scaling percentage

## Preset Storage

Presets are stored in `display_presets.json` with the following structure:
```json
{
  "Preset Name": {
    "displays": [
      {
        "device_name": "\\\\.\\DISPLAY1",
        "resolution": [1920, 1080],
        "refresh_rate": 60,
        "orientation": 0,
        "scale": 100
      }
    ]
  }
}
```

## Troubleshooting

### Common Issues

1. **"Access Denied" errors**: Run the app as administrator
2. **Display settings not applying**: Ensure your graphics drivers support the requested settings
3. **App not appearing in system tray**: Check if system tray icons are hidden

### Administrator Rights

The application requires administrator privileges to modify display settings. If you encounter permission errors:

1. Right-click on the Python executable or command prompt
2. Select "Run as administrator"
3. Navigate to the project directory
4. Run `python display_presets.py`

## Development

### Building from Source

1. Clone the repository
2. Install dependencies: `pip install -r requirements.txt`
3. Run the app: `python display_presets.py`

### Creating Executable

```bash
python build_exe.py
```

### Creating Installer

1. Install NSIS
2. Run: `makensis installer.nsi`

## License

This project is licensed under the MIT License - see the [LICENSE](LICENSE) file for details.

## Contributing

1. Fork the repository
2. Create a feature branch
3. Make your changes
4. Submit a pull request

## Support

If you encounter any issues or have questions, please open an issue on GitHub.
```

## 5. GitHub Repository Setup

To put this on your GitHub DisplayManager repo:

1. **Create the repository** (if not already created)
2. **Upload the files** with this structure:
   ```
   DisplayManager/
   ├── display_presets.py
   ├── display_manager.py
   ├── display_presets.json
   ├── requirements.txt
   ├── setup.py
   ├── build_exe.py
   ├── installer.nsi
   ├── build.bat
   ├── package.bat
   ├── launch.bat
   ├── run_as_admin.bat
   ├── LICENSE.txt
   ├── README.md
   └── .gitignore
   ```

3. **Create a .gitignore file:**
   ```
   __pycache__/
   *.pyc
   *.pyo
   *.pyd
   .Python
   build/
   develop-eggs/
   dist/
   downloads/
   eggs/
   .eggs/
   lib/
   lib64/
   parts/
   sdist/
   var/
   wheels/
   *.egg-info/
   .installed.cfg
   *.egg
   MANIFEST
   .pytest_cache/
   .coverage
   htmlcov/
   .tox/
   .venv/
   venv/
   ENV/
   env/
   .env
   *.exe
   *.msi
   *.zip
   ```

4. **Create releases** with the executable files

The app is now ready to ship! The simplified version focuses on the core functionality (resolution, refresh rate, orientation, DPI scaling) without the problematic position management.
